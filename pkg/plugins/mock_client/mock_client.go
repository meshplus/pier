// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/meshplus/bitxhub-model/pb"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockClient) Initialize(configPath, pierID string, extra []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", configPath, pierID, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockClientMockRecorder) Initialize(configPath, pierID, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockClient)(nil).Initialize), configPath, pierID, extra)
}

// Start mocks base method
func (m *MockClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClient)(nil).Start))
}

// Stop mocks base method
func (m *MockClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}

// GetIBTP mocks base method
func (m *MockClient) GetIBTP() chan *pb.IBTP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIBTP")
	ret0, _ := ret[0].(chan *pb.IBTP)
	return ret0
}

// GetIBTP indicates an expected call of GetIBTP
func (mr *MockClientMockRecorder) GetIBTP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIBTP", reflect.TypeOf((*MockClient)(nil).GetIBTP))
}

// SubmitIBTP mocks base method
func (m *MockClient) SubmitIBTP(arg0 *pb.IBTP) (*pb.SubmitIBTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitIBTP", arg0)
	ret0, _ := ret[0].(*pb.SubmitIBTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitIBTP indicates an expected call of SubmitIBTP
func (mr *MockClientMockRecorder) SubmitIBTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitIBTP", reflect.TypeOf((*MockClient)(nil).SubmitIBTP), arg0)
}

// GetOutMessage mocks base method
func (m *MockClient) GetOutMessage(to string, idx uint64) (*pb.IBTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutMessage", to, idx)
	ret0, _ := ret[0].(*pb.IBTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutMessage indicates an expected call of GetOutMessage
func (mr *MockClientMockRecorder) GetOutMessage(to, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutMessage", reflect.TypeOf((*MockClient)(nil).GetOutMessage), to, idx)
}

// GetInMessage mocks base method
func (m *MockClient) GetInMessage(from string, idx uint64) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInMessage", from, idx)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInMessage indicates an expected call of GetInMessage
func (mr *MockClientMockRecorder) GetInMessage(from, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInMessage", reflect.TypeOf((*MockClient)(nil).GetInMessage), from, idx)
}

// GetInMeta mocks base method
func (m *MockClient) GetInMeta() (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInMeta")
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInMeta indicates an expected call of GetInMeta
func (mr *MockClientMockRecorder) GetInMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInMeta", reflect.TypeOf((*MockClient)(nil).GetInMeta))
}

// GetOutMeta mocks base method
func (m *MockClient) GetOutMeta() (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutMeta")
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutMeta indicates an expected call of GetOutMeta
func (mr *MockClientMockRecorder) GetOutMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutMeta", reflect.TypeOf((*MockClient)(nil).GetOutMeta))
}

// GetCallbackMeta mocks base method
func (m *MockClient) GetCallbackMeta() (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallbackMeta")
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallbackMeta indicates an expected call of GetCallbackMeta
func (mr *MockClientMockRecorder) GetCallbackMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallbackMeta", reflect.TypeOf((*MockClient)(nil).GetCallbackMeta))
}

// CommitCallback mocks base method
func (m *MockClient) CommitCallback(ibtp *pb.IBTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitCallback", ibtp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitCallback indicates an expected call of CommitCallback
func (mr *MockClientMockRecorder) CommitCallback(ibtp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitCallback", reflect.TypeOf((*MockClient)(nil).CommitCallback), ibtp)
}

// Name mocks base method
func (m *MockClient) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockClientMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockClient)(nil).Name))
}

// Type mocks base method
func (m *MockClient) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockClientMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockClient)(nil).Type))
}
