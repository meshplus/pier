// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_executor is a generated GoMock package.
package mock_executor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/meshplus/bitxhub-model/pb"
	model "github.com/meshplus/pier/pkg/model"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecuteIBTP mocks base method.
func (m *MockExecutor) ExecuteIBTP(wIbtp *model.WrappedIBTP) (*pb.IBTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteIBTP", wIbtp)
	ret0, _ := ret[0].(*pb.IBTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteIBTP indicates an expected call of ExecuteIBTP.
func (mr *MockExecutorMockRecorder) ExecuteIBTP(wIbtp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteIBTP", reflect.TypeOf((*MockExecutor)(nil).ExecuteIBTP), wIbtp)
}

// QueryAppchainIndex mocks base method.
func (m *MockExecutor) QueryAppchainIndex() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAppchainIndex")
	ret0, _ := ret[0].(int64)
	return ret0
}

// QueryAppchainIndex indicates an expected call of QueryAppchainIndex.
func (mr *MockExecutorMockRecorder) QueryAppchainIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAppchainIndex", reflect.TypeOf((*MockExecutor)(nil).QueryAppchainIndex))
}

// QueryCallbackMeta mocks base method.
func (m *MockExecutor) QueryCallbackMeta() map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCallbackMeta")
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// QueryCallbackMeta indicates an expected call of QueryCallbackMeta.
func (mr *MockExecutorMockRecorder) QueryCallbackMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCallbackMeta", reflect.TypeOf((*MockExecutor)(nil).QueryCallbackMeta))
}

// QueryFilterLockStart mocks base method.
func (m *MockExecutor) QueryFilterLockStart(appchainIndex int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFilterLockStart", appchainIndex)
	ret0, _ := ret[0].(int64)
	return ret0
}

// QueryFilterLockStart indicates an expected call of QueryFilterLockStart.
func (mr *MockExecutorMockRecorder) QueryFilterLockStart(appchainIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFilterLockStart", reflect.TypeOf((*MockExecutor)(nil).QueryFilterLockStart), appchainIndex)
}

// QueryIBTPReceipt mocks base method.
func (m *MockExecutor) QueryIBTPReceipt(originalIBTP *pb.IBTP) (*pb.IBTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIBTPReceipt", originalIBTP)
	ret0, _ := ret[0].(*pb.IBTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIBTPReceipt indicates an expected call of QueryIBTPReceipt.
func (mr *MockExecutorMockRecorder) QueryIBTPReceipt(originalIBTP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIBTPReceipt", reflect.TypeOf((*MockExecutor)(nil).QueryIBTPReceipt), originalIBTP)
}

// QueryInterchainMeta mocks base method.
func (m *MockExecutor) QueryInterchainMeta() map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInterchainMeta")
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// QueryInterchainMeta indicates an expected call of QueryInterchainMeta.
func (mr *MockExecutorMockRecorder) QueryInterchainMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInterchainMeta", reflect.TypeOf((*MockExecutor)(nil).QueryInterchainMeta))
}

// QueryLockEventByIndex mocks base method.
func (m *MockExecutor) QueryLockEventByIndex(index int64) *pb.LockEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLockEventByIndex", index)
	ret0, _ := ret[0].(*pb.LockEvent)
	return ret0
}

// QueryLockEventByIndex indicates an expected call of QueryLockEventByIndex.
func (mr *MockExecutorMockRecorder) QueryLockEventByIndex(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLockEventByIndex", reflect.TypeOf((*MockExecutor)(nil).QueryLockEventByIndex), index)
}

// QueryRelayIndex mocks base method.
func (m *MockExecutor) QueryRelayIndex() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelayIndex")
	ret0, _ := ret[0].(int64)
	return ret0
}

// QueryRelayIndex indicates an expected call of QueryRelayIndex.
func (mr *MockExecutorMockRecorder) QueryRelayIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelayIndex", reflect.TypeOf((*MockExecutor)(nil).QueryRelayIndex))
}

// Rollback mocks base method.
func (m *MockExecutor) Rollback(ibtp *pb.IBTP, isSrcChain bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", ibtp, isSrcChain)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockExecutorMockRecorder) Rollback(ibtp, isSrcChain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockExecutor)(nil).Rollback), ibtp, isSrcChain)
}

// SendBurnEvent mocks base method.
func (m *MockExecutor) SendBurnEvent(unLockEvt *pb.UnLock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBurnEvent", unLockEvt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBurnEvent indicates an expected call of SendBurnEvent.
func (mr *MockExecutorMockRecorder) SendBurnEvent(unLockEvt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBurnEvent", reflect.TypeOf((*MockExecutor)(nil).SendBurnEvent), unLockEvt)
}

// Start mocks base method.
func (m *MockExecutor) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockExecutorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockExecutor)(nil).Start))
}

// Stop mocks base method.
func (m *MockExecutor) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockExecutorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockExecutor)(nil).Stop))
}
