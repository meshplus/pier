// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_lite is a generated GoMock package.
package mock_lite

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/meshplus/bitxhub-model/pb"
	reflect "reflect"
)

// MockLite is a mock of Lite interface
type MockLite struct {
	ctrl     *gomock.Controller
	recorder *MockLiteMockRecorder
}

// MockLiteMockRecorder is the mock recorder for MockLite
type MockLiteMockRecorder struct {
	mock *MockLite
}

// NewMockLite creates a new mock instance
func NewMockLite(ctrl *gomock.Controller) *MockLite {
	mock := &MockLite{ctrl: ctrl}
	mock.recorder = &MockLiteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLite) EXPECT() *MockLiteMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockLite) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockLiteMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLite)(nil).Start))
}

// Stop mocks base method
func (m *MockLite) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockLiteMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLite)(nil).Stop))
}

// QueryHeader mocks base method
func (m *MockLite) QueryHeader(height uint64) (*pb.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHeader", height)
	ret0, _ := ret[0].(*pb.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHeader indicates an expected call of QueryHeader
func (mr *MockLiteMockRecorder) QueryHeader(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHeader", reflect.TypeOf((*MockLite)(nil).QueryHeader), height)
}
